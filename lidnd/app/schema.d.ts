/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/post_encounter_to_user_channel": {
    /** Post Encounter To User Channel */
    post: operations["post_encounter_to_user_channel_api_post_encounter_to_user_channel_post"];
  };
  "/api/discord-channel": {
    /** Get Discord Channel */
    get: operations["get_discord_channel_api_discord_channel_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_post_encounter_to_user_channel_api_post_encounter_to_user_channel_post */
    Body_post_encounter_to_user_channel_api_post_encounter_to_user_channel_post: {
      encounter: components["schemas"]["Encounter"];
      settings: components["schemas"]["Settings"];
    };
    /** DiscordTextChannel */
    DiscordTextChannel: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** Members */
      members: string[];
      /** Guild */
      guild: string;
      /** Encounter Message Id */
      encounter_message_id?: number | null;
    };
    /** Encounter */
    Encounter: {
      /** Id */
      id: string;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Settings */
    Settings: {
      /** User Id */
      user_id: string;
      /** Show Health In Discord */
      show_health_in_discord: boolean;
      /** Show Icons In Discord */
      show_icons_in_discord: boolean;
      /** Average Turn Seconds */
      average_turn_seconds: number;
      /** Default Player Level */
      default_player_level: number;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Post Encounter To User Channel */
  post_encounter_to_user_channel_api_post_encounter_to_user_channel_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_post_encounter_to_user_channel_api_post_encounter_to_user_channel_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Discord Channel */
  get_discord_channel_api_discord_channel_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DiscordTextChannel"];
        };
      };
    };
  };
}
